import datetime
import ipaddress


def giveslovo(stroka, line0, nach):
    global line_fin
    dlina = len(stroka)
    line2 = line0[nach + dlina:]
    conec = line2.find('"')
    line3 = line2[:conec]
    line_fin = line3


def calc_mask(prefix):
    global res
    pre = ''
    b = 0
    c = 0
    i = 0
    res = ''
    for i in range(prefix):
        pre = pre + '1'
    for p in range(i, 31):
        pre = pre + '0'
    pre = pre[::-1]
    for o in range(0, 4):
        b = 0
        for n in range(0, 8):
            c = c + 1
            a = int(pre[c - 1]) * (2 ** (n))
            b = b + a

        res = str(b) + '.' + res

    q = len(res)
    res = res[0:q - 1]


def accociateiproute(routeip, routemask, gate, netip, netmask, intip, intmask, intname):
    global routes, tunnels, finalroucount, finaltunnelcount
    count = -1
    finalroucount = 0
    finaltunnelcount = 0
    withint = []
    tunnels = []
    routes = []
    x = ''
    for x in routeip:
        count = count + 1
        countint = -1
        for y in intip:
            countint = countint + 1
            skleika = ipaddress.ip_network(y + '/' + intmask[countint], False)

            if ipaddress.ip_address(x) in skleika:
                withint.append(
                    [str(routeip[count]), str(routemask[count]), str(gate[count]), str(intname[countint]), str(count)])
            elif ipaddress.ip_address(gate[count]) in skleika:
                withint.append(
                    [str(routeip[count]), str(routemask[count]), str(gate[count]), str(intname[countint]), str(count)])

        countnet = -1
        for l in netip:
            countnet = countnet + 1
            skleika2 = ipaddress.ip_network(withint[count][0] + '/' + withint[count][1], False)
            skleika3 = ipaddress.ip_network(netip[0] + '/' + netmask[0], False)

            if skleika2 == skleika3:
                routes.append(withint[count])
                finalroucount = finalroucount + 1

            else:
                tunnels.append(withint[count])
                finaltunnelcount = finaltunnelcount + 1




dt_now = datetime.datetime.now()
dt_now = str(dt_now)[:19]
intcount = 0
routecount = 0
routes = []
tunnels = []
finalroucount = 0
finaltunnelcount = 0
flagi = ['os="',
         'asset assetname="',
         'ip_address="',
         'ip_mask="',
         'type="',
         'routing_rule destination="',
         'gateway="',
         'interface name="',
         'number="',
         ' mask="'
         ]
net_ip = []
netmask = []
intip = []
intmask = []
intname = []
tippodkl = []
clearip = []
routeip = []
routemask = []
gate = []
x = 0
y = 0
with open(r'./input1.xml') as f:
    line = str(f.readline())
    while line != '':
        for flag in flagi:

            nachalo = line.rfind(flag)
            if nachalo != -1:
                giveslovo(flag, line, nachalo)
                if flag == 'os="':
                    forwhat = line_fin
                if flag == 'number="':
                    net_ip.append(line_fin)
                if flag == ' mask="':
                    netmask.append(line_fin)
                elif flag == 'asset assetname="':
                    name = line_fin
                elif flag == 'ip_address="':
                    intip.append(line_fin)
                    intcount = intcount + 1
                elif flag == 'ip_mask="':
                    intmask.append(line_fin)
                elif flag == 'type="':
                    tippodkl.append(line_fin)
                elif flag == 'routing_rule destination="':
                    clearip.append(line_fin)
                    cutmask = line_fin.find("/")
                    routeip.append(line_fin[:cutmask])
                    pref = int(line_fin[cutmask + 1:])
                    routecount = routecount + 1
                    if pref == 0:
                        routemask.append('0.0.0.0')
                    else:
                        calc_mask(pref)
                        routemask.append(res)
                elif flag == 'gateway="':
                    gate.append(line_fin)
                elif flag == 'interface name="':
                    intname.append(line_fin)

        line = str(f.readline())

accociateiproute(routeip, routemask, gate, net_ip, netmask, intip, intmask, intname)

f2 = open(r'./Outputest.urt', 'w')
f2.write('# ==========================================================' + '\n')
f2.write('# AlgoSec Firewall Analyzer:' + '\n')
f2.write('# Routing Table for ' + forwhat + '\n')
f2.write('# Firewall name: ' + name + '.urt' + '\n');
f2.write('# Generated by C|3RTO|/|_HEPE|3AP: on ' + dt_now + '\n')
f2.write('# ==========================================================' + '\n')
f2.write('# Interfaces' + '\n')
f2.writelines(
    intip[x] + ' ' + '-' + ' ' * (16 - len(intip[x])) + intmask[x] + ' ' * (16 - len(intmask[x])) + intname[x] + ' ' +
    intname[x] + '\n'
    for x in range(intcount))
f2.writelines('# Routes' + '\n')
f2.writelines(
    "{:<17}{:<17}{:<17}{:<0}{:<0}{:<16}{:<0}{:<0}{:<0}\n".format(routes[x][0], routes[x][1], routes[x][2], 'tunnel_',
                                                                 routes[x][3], str(routes[x][4]), 'tunnel_',
                                                                 routes[x][3], routes[x][4])
    for x in range(finalroucount))
f2.write('# Tunnels routes' + '\n')
f2.writelines(
    "{:<17}{:<17}{:<17}{:<0}{:<0}{:<16}{:<0}{:<0}{:<0}\n".format(tunnels[x][0], tunnels[x][1], tunnels[x][2], 'tunnel_',
                                                                 tunnels[x][3], str(tunnels[x][4]), 'tunnel_',
                                                                 tunnels[x][3], tunnels[x][4])
    for x in range(finaltunnelcount))
f2.write('# Tunnels definitions' + '\n')
f2.writelines(
    "{:<17}{:<17}{:<17}{:<0}{:<0}{:<16}{:<0}{:<0}{:<0}\n{:<17}{:<17}{:<17}{:<}{:<0}{:<16}{:<0}{:<0}{:<0}\n".format(
        tunnels[x][2], '255.255.255.255', tunnels[x][2], 'tunnel_', tunnels[x][3], str(tunnels[x][4]), 'tunnel_',
        tunnels[x][3], tunnels[x][4], 'layer2', 'layer2', '-', 'tunnel_', tunnels[x][3], str(tunnels[x][4]), 'tunnel_',
        tunnels[x][3], tunnels[x][4])
    for x in range(finaltunnelcount))

f2.writelines(
    "{:<17}{:<17}{:<17}{:<0}{:<0}{:<16}{:<0}{:<0}{:<0}\n{:<17}{:<17}{:<17}{:<}{:<0}{:<16}{:<0}{:<0}{:<0}\n".format(
        tunnels[x][2], '255.255.255.255', tunnels[x][2], 'tunnel_', tunnels[x][3], str(tunnels[x][4]), 'tunnel_',
        tunnels[x][3], tunnels[x][4], 'layer2', 'layer2', '-', 'tunnel_', tunnels[x][3], str(tunnels[x][4]), 'tunnel_',
        tunnels[x][3], tunnels[x][4])
    for x in range(finaltunnelcount))


#
#
# conn = pyodbc.connect('DRIVER={SQL Server}; SERVER=REMOTE119-NB;' +
#                       'DATABASE=Office;' +
#                       'UID=programma;' +
#                       'PWD=!Programm123'
#                       )
# cursor = conn.cursor()
#
#
#
# query = 'EXEC Showhumsters'
# cursor.execute(query)
# res = cursor.fetchall()
# a=0
# for x in res:
#    print(res[a],'\n')
#    a = a+1
#






